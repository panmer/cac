{"version":3,"sources":["components/Login/index.jsx","state.js","api.js","utils.js","components/Chat/components/ChatList/components/ChatIcon.jsx","components/Chat/components/ChatList/components/AvatarImage.jsx","components/Chat/components/OnlineIndicator.jsx","components/Chat/components/ChatList/components/ChatListItem/index.jsx","components/Chat/components/ChatList/components/Footer.jsx","components/Chat/components/ChatList/index.jsx","components/Chat/components/MessageList/components/InfoMessage.jsx","components/Chat/components/MessageList/components/MessagesLoading.jsx","components/Chat/components/MessageList/components/NoMessages.jsx","components/Chat/components/MessageList/components/ClockIcon.jsx","components/Chat/components/MessageList/components/ReceiverMessage.jsx","components/Chat/components/MessageList/components/SenderMessage.jsx","components/Chat/components/MessageList/index.jsx","components/Chat/components/TypingArea.jsx","components/Chat/use-chat-handlers.js","components/Chat/index.jsx","components/LoadingScreen.jsx","components/Navbar.jsx","hooks.js","use-socket.js","App.jsx","index.jsx"],"names":["DEMO_USERS","Login","_ref","onLogIn","username","setUsername","useState","Math","floor","random","length","error","setError","password","setPassword","_jsx","_Fragment","children","className","_jsxs","style","boxShadow","maxWidth","backgroundColor","padding","src","concat","process","bottom","left","paddingTop","borderBottomLeftRadius","borderBottomRightRadius","onSubmit","async","event","preventDefault","UsernameSelect","names","htmlFor","value","onChange","target","type","id","required","height","Toast","minWidth","onClose","show","delay","autohide","Header","alt","Body","_ref2","_ref$current","open","setOpen","width","setWidth","ref","useRef","clientRectWidth","current","getBoundingClientRect","useEffect","listener","document","addEventListener","removeEventListener","_ref$current2","focus","tabIndex","onClick","o","d","fill","map","name","reducer","state","action","currentRoom","rooms","users","payload","online","messages","offset","undefined","lastMessage","message","newRooms","forEach","room","initialState","AppContext","createContext","useAppState","dispatch","useContext","useAppStateContext","useReducer","axios","defaults","withCredentials","url","path","getMessages","arguments","size","get","params","then","x","data","reverse","parseRoomName","populateUsersFromLoadedMessages","require","userIds","from","ids","Object","keys","filter","newUsers","reduce","y","getUsers","ChatIcon","viewBox","xmlns","rx","stroke","strokeWidth","x1","y1","x2","y2","gradientUnits","stopColor","AvatarImage","useMemo","av","roomId","uidParsed","split","pop","roomIdParsed","theId","getAvatarByUserAndRoomId","objectFit","OnlineIndicator","hide","opacity","useChatListItemHandlers","isUser","userId","pseudoUserId","abs","parseInt","usersFiltered","entries","user","_ref3","_","useLastMessage","ChatListItem","active","moment","unix","date","format","LogoutButton","onLogOut","col","noinfo","cursor","Plug","UserInfo","Footer","flex","minHeight","ChatList","processedRooms","roomsList","values","main","other","sort","a","b","InfoMessage","fontSize","MessagesLoading","role","NoMessages","CardText","ClockIcon","ReceiverMessage","borderRadius","fontWeight","SenderMessage","onUserClicked","color","MessageList","messageListElement","onLoadMoreMessages","key","TypingArea","setMessage","e","placeholder","useChatHandlers","scrollToTop","useCallback","setTimeout","scrollTop","scrollToBottom","scrollTo","top","scrollHeight","onFetchMessages","prepend","targetUser","user1","user2","post","addRoom","Chat","onMessageSend","borderBottom","trim","LoadingScreen","Navbar","showLogin","href","useUser","onUserLoaded","loading","setLoading","setUser","catch","onError","onLoading","login","Error","response","updateUser","newUser","infoMessage","useSocket","onLogOutBase","connected","setConnected","eventSourceRef","emit","JSON","stringify","emitMessage","window","onbeforeunload","close","EventSource","onmessage","parse","onShowRoom","onMessage","useAppHandlers","onLogOutA","socket","push","getRooms","console","Date","App","Provider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1c245f20.chunk.js","sourcesContent":["// @ts-check\r\nimport { Toast } from \"react-bootstrap\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport \"./style.css\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst DEMO_USERS = [\"User1\", \"User2\", \"User3\", \"User4\"];\r\n\r\nexport default function Login({ onLogIn }) {\r\n  const [username, setUsername] = useState(\r\n    () => DEMO_USERS[Math.floor(Math.random() * DEMO_USERS.length)]\r\n  );\r\n\r\n  const [error, setError] = useState(null);\r\n  const [password, setPassword] = useState(\"password123\")\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    onLogIn(username, password, setError);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"login-form text-center login-page\">\r\n        <div\r\n          className=\"rounded\"\r\n          style={{\r\n            boxShadow: \"0 0.75rem 1.5rem rgba(18,38,63,.03)\",\r\n          }}\r\n        >\r\n          <div className=\"position-relative\">\r\n            <div\r\n              className=\"row no-gutters align-items-center\"\r\n              style={{\r\n                maxWidth: 400,\r\n                backgroundColor: \"palegreen\",\r\n                padding: 20,\r\n              }}\r\n            >\r\n              <div className=\"col text-primary text-left\">\r\n                <h3 className=\"font-size-15\">Spring Redis Chat App!</h3>\r\n                Password:&nbsp;<i>password123</i>\r\n              </div>\r\n              <div className=\"col align-self-end\">\r\n                <img\r\n                  style={{ maxWidth: \"80%\" }}\r\n                  src={`${process.env.PUBLIC_URL}/welcome-back.png`}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div\r\n              className=\"position-absolute\"\r\n              style={{ bottom: -10, left: 20 }}\r\n            >\r\n            </div>\r\n          </div>\r\n\r\n          <form\r\n            className=\"bg-white text-left px-4\"\r\n            style={{\r\n              paddingTop: 20,\r\n              borderBottomLeftRadius: 4,\r\n              borderBottomRightRadius: 4,\r\n            }}\r\n            onSubmit={onSubmit}\r\n          >\r\n            <label className=\"font-size-12\">Name</label>\r\n\r\n            <div className=\"username-select mb-3\">\r\n              <UsernameSelect\r\n                username={username}\r\n                setUsername={setUsername}\r\n                names={DEMO_USERS}\r\n              />\r\n            </div>\r\n\r\n            <label htmlFor=\"inputPassword\" className=\"font-size-12\">\r\n              Password\r\n            </label>\r\n            <input\r\n              value={\"password123\"}\r\n              onChange={(event) => setPassword(event.target.value)}\r\n              type=\"password\"\r\n              id=\"inputPassword\"\r\n              className=\"form-control\"\r\n              required\r\n            />\r\n            <div style={{ height: 30 }} />\r\n            <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">\r\n              Sign in\r\n            </button>\r\n            <div className=\"login-error-anchor\">\r\n              <div className=\"toast-box\">\r\n                <Toast\r\n                  style={{ minWidth: 277 }}\r\n                  onClose={() => setError(null)}\r\n                  show={error !== null}\r\n                  delay={3000}\r\n                  autohide\r\n                >\r\n                  <Toast.Header>\r\n                    <img\r\n                      src=\"holder.js/20x20?text=%20\"\r\n                      className=\"rounded mr-2\"\r\n                      alt=\"\"\r\n                    />\r\n                    <strong className=\"mr-auto\">Error</strong>\r\n                  </Toast.Header>\r\n                  <Toast.Body>{error}</Toast.Body>\r\n                </Toast>\r\n              </div>\r\n            </div>\r\n            <div style={{ height: 30 }} />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst UsernameSelect = ({ username, setUsername, names = [\"\"] }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [width, setWidth] = useState(0);\r\n  const ref = useRef();\r\n  /** @ts-ignore */\r\n  const clientRectWidth = ref.current?.getBoundingClientRect().width;\r\n  useEffect(() => {\r\n    /** @ts-ignore */\r\n    setWidth(clientRectWidth);\r\n  }, [clientRectWidth]);\r\n\r\n  /** Click away listener */\r\n  useEffect(() => {\r\n    if (open) {\r\n      const listener = () => setOpen(false);\r\n      document.addEventListener(\"click\", listener);\r\n      return () => document.removeEventListener(\"click\", listener);\r\n    }\r\n  }, [open]);\r\n\r\n  /** Make the current div focused */\r\n  useEffect(() => {\r\n    if (open) {\r\n      /** @ts-ignore */\r\n      ref.current?.focus();\r\n    }\r\n  }, [open]);\r\n\r\n  return (\r\n    <div\r\n      tabIndex={0}\r\n      ref={ref}\r\n      className={`username-select-dropdown ${open ? \"open\" : \"\"}`}\r\n      onClick={() => setOpen((o) => !o)}\r\n    >\r\n      <div className=\"username-select-row\">\r\n        <div>{username}</div>\r\n        <div>\r\n          <svg width={24} height={24}>\r\n            <path d=\"M7 10l5 5 5-5z\" fill=\"#333\" />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div\r\n        style={{ width: width }}\r\n        className={`username-select-block ${open ? \"open\" : \"\"}`}\r\n      >\r\n        {names.map((name) => (\r\n          <div\r\n            className=\"username-select-block-item\"\r\n            key={name}\r\n            onClick={() => setUsername(name)}\r\n          >\r\n            {name}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// @ts-check\r\nimport { createContext, useContext, useReducer } from \"react\";\r\n\r\n/**\r\n * @typedef {{\r\n *  from: string\r\n *  date: number\r\n *  message: string\r\n *  roomId?: string\r\n * }} Message\r\n *\r\n * @typedef {{\r\n *   name: string;\r\n *   id: string;\r\n *   messages?: Message[]\r\n *   connected?: boolean;\r\n *   offset?: number;\r\n *   forUserId?: null | number | string\r\n *   lastMessage?: Message | null\r\n * }} Room\r\n *\r\n * @typedef {{\r\n *   username: string;\r\n *   id: string;\r\n *   online?: boolean;\r\n *   room?: string;\r\n * }} UserEntry\r\n *\r\n * @typedef {{\r\n *  currentRoom: string;\r\n *  rooms: {[id: string]: Room};\r\n *  users: {[id: string]: UserEntry}\r\n * }} State\r\n *\r\n * @param {State} state\r\n * @param {{type: string; payload: any}} action\r\n * @returns {State}\r\n */\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"clear\":\r\n      return { currentRoom: \"0\", rooms: {}, users: {} };\r\n    case \"set user\": {\r\n      return {\r\n        ...state,\r\n        users: { ...state.users, [action.payload.id]: action.payload },\r\n      };\r\n    }\r\n    case \"make user online\": {\r\n      return {\r\n        ...state,\r\n        users: {\r\n          ...state.users,\r\n          [action.payload]: { ...state.users[action.payload], online: true },\r\n        },\r\n      };\r\n    }\r\n    case \"append users\": {\r\n      return { ...state, users: { ...state.users, ...action.payload } };\r\n    }\r\n    case \"set messages\": {\r\n      return {\r\n        ...state,\r\n        rooms: {\r\n          ...state.rooms,\r\n          [action.payload.id]: {\r\n            ...state.rooms[action.payload.id],\r\n            messages: action.payload.messages,\r\n            offset: action.payload.messages.length,\r\n          },\r\n        },\r\n      };\r\n    }\r\n    case \"prepend messages\": {\r\n      const messages = [\r\n        ...action.payload.messages,\r\n        ...state.rooms[action.payload.id].messages,\r\n      ];\r\n      return {\r\n        ...state,\r\n        rooms: {\r\n          ...state.rooms,\r\n          [action.payload.id]: {\r\n            ...state.rooms[action.payload.id],\r\n            messages,\r\n            offset: messages.length,\r\n          },\r\n        },\r\n      };\r\n    }\r\n    case \"append message\":\r\n      if (state.rooms[action.payload.id] === undefined) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        rooms: {\r\n          ...state.rooms,\r\n          [action.payload.id]: {\r\n            ...state.rooms[action.payload.id],\r\n            lastMessage: action.payload.message,\r\n            messages: state.rooms[action.payload.id].messages\r\n              ? [\r\n                ...state.rooms[action.payload.id].messages,\r\n                action.payload.message,\r\n              ]\r\n              : undefined,\r\n          },\r\n        },\r\n      };\r\n    case 'set last message':\r\n      return { ...state, rooms: { ...state.rooms, [action.payload.id]: { ...state.rooms[action.payload.id], lastMessage: action.payload.lastMessage } } };\r\n    case \"set current room\":\r\n      return { ...state, currentRoom: action.payload };\r\n    case \"add room\":\r\n      return {\r\n        ...state,\r\n        rooms: { ...state.rooms, [action.payload.id]: action.payload },\r\n      };\r\n    case \"set rooms\": {\r\n      /** @type {Room[]} */\r\n      const newRooms = action.payload;\r\n      const rooms = { ...state.rooms };\r\n      newRooms.forEach((room) => {\r\n        rooms[room.id] = {\r\n          ...room,\r\n          messages: rooms[room.id] && rooms[room.id].messages,\r\n        };\r\n      });\r\n      return { ...state, rooms };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/** @type {State} */\r\nconst initialState = {\r\n  currentRoom: \"main\",\r\n  rooms: {},\r\n  users: {},\r\n};\r\n\r\nconst useAppStateContext = () => {\r\n  return useReducer(reducer, initialState);\r\n};\r\n\r\n// @ts-ignore\r\nexport const AppContext = createContext();\r\n\r\n/**\r\n * @returns {[\r\n *  State,\r\n *  React.Dispatch<{\r\n *   type: string;\r\n *   payload: any;\r\n * }>\r\n * ]}\r\n */\r\nexport const useAppState = () => {\r\n  const [state, dispatch] = useContext(AppContext);\r\n  return [state, dispatch];\r\n};\r\n\r\nexport default useAppStateContext;","import axios from 'axios';\r\naxios.defaults.withCredentials = true;\r\n\r\nconst BASE_URL = 'http://localhost:8080';\r\n\r\nexport const MESSAGES_TO_LOAD = 10;\r\n\r\nfunction url(path) { return `${BASE_URL}${path}`; }\r\n\r\n/** Checks if there's an existing session. */\r\nexport const getMe = () => {\r\n  return axios.get(url('/users/me'))\r\n    .then(x => x.data)\r\n    .catch(_ => null);\r\n};\r\n\r\n/** \r\n * Fetch users by requested ids\r\n * @param {Array<number | string>} ids\r\n */\r\nexport const getUsers = (ids) => {\r\n  return axios.get(url(`/users`), { params: { ids: ids.reduce((x, y) => `${x},${y}`) } }).then(x => x.data);\r\n};\r\n\r\n/** Fetch users which are online */\r\nexport const getOnlineUsers = () => {\r\n  return axios.get(url(`/users/online`)).then(x => x.data);\r\n};\r\n\r\n/** Handle user log in */\r\nexport const login = (username, password) => {\r\n  return axios.post(url('/auth/login'), {\r\n    username,\r\n    password\r\n  }).then(x =>\r\n    x.data\r\n  )\r\n    .catch(e => { throw new Error(e.response && e.response.data && e.response.data.message); });\r\n};\r\n\r\nexport const logOut = () => {\r\n  return axios.post(url('/auth/logout'));\r\n};\r\n\r\n// /** \r\n//  * Function for checking which deployment urls exist.\r\n//  * \r\n//  * @returns {Promise<{\r\n//  *   heroku?: string;\r\n//  *   google_cloud?: string;\r\n//  *   vercel?: string;\r\n//  *   github?: string;\r\n//  * }>} \r\n//  */\r\n// export const getButtonLinks = () => {\r\n//   return axios.get(url('/links'))\r\n//     .then(x => x.data)\r\n//     .catch(_ => null);\r\n// };\r\n\r\n/** \r\n * @returns {Promise<Array<{ names: string[]; id: string }>>} \r\n */\r\nexport const getRooms = async (userId) => {\r\n  return axios.get(url(`/rooms/user/${userId}`)).then(x => x.data);\r\n};\r\n\r\n/**\r\n * Load messages\r\n * \r\n * @param {string} id room id\r\n * @param {number} offset \r\n * @param {number} size \r\n */\r\nexport const getMessages = (id,\r\n  offset = 0,\r\n  size = MESSAGES_TO_LOAD\r\n) => {\r\n  return axios.get(url(`/rooms/messages/${id}`), {\r\n    params: {\r\n      offset,\r\n      size\r\n    }\r\n  })\r\n    .then(x => x.data.reverse());\r\n};\r\n\r\n/** This one is called on a private messages room created. */\r\nexport const addRoom = async (user1, user2) => {\r\n  return axios.post(url(`/room`), { user1, user2 }).then(x => x.data);\r\n};\r\n\r\nexport const emitMessage = async (type = \"\", user, message) => await axios.post(url('/chat/emit'), { type, user, data: JSON.stringify(message) });\r\n\r\nexport const getEventSource = (userId) => new EventSource(url(`/chat/stream?userId=${userId}`));\r\n","// @ts-check\r\n\r\nimport { getUsers } from \"./api\";\r\n\r\n/**\r\n * @param {string[]} names\r\n * @param {string} username\r\n */\r\nexport const parseRoomName = (names, username) => {\r\n  for (let name of names) {\r\n    if (typeof name !== 'string') {\r\n      name = name[0];\r\n    }\r\n    if (name !== username) {\r\n      return name;\r\n    }\r\n  }\r\n  return names[0];\r\n};\r\n\r\n/** Get an avatar for a room or a user */\r\nexport const getAvatarByUserAndRoomId = (roomId = \"1\") => {\r\n  const TOTAL_IMAGES = 13;\r\n  const seed1 = 654;\r\n  const seed2 = 531;\r\n\r\n  const uidParsed = +roomId.split(\":\").pop();\r\n  let roomIdParsed = +roomId.split(\":\").reverse().pop();\r\n  if (roomIdParsed < 0) {\r\n    roomIdParsed += 3555;\r\n  }\r\n\r\n  const theId = (uidParsed * seed1 + roomIdParsed * seed2) % TOTAL_IMAGES;\r\n\r\n  // @ts-ignore\r\n  return `${process.env.PUBLIC_URL}/avatars/${theId}.jpg`;\r\n};\r\n\r\nconst jdenticon = require(\"jdenticon\");\r\n\r\nconst avatars = {};\r\nexport const getAvatar = (username) => {\r\n  let av = avatars[username];\r\n  if (av === undefined) {\r\n    av =\r\n      \"data:image/svg+xml;base64,\" + window.btoa(jdenticon.toSvg(username, 50));\r\n    avatars[username] = av;\r\n  }\r\n  return av;\r\n};\r\n\r\nexport const populateUsersFromLoadedMessages = async (users, dispatch, messages) => {\r\n  const userIds = {};\r\n  messages.forEach((message) => {\r\n    userIds[message.from] = 1;\r\n  });\r\n\r\n  const ids = Object.keys(userIds).filter(\r\n    (id) => users[id] === undefined\r\n  );\r\n\r\n  if (ids.length !== 0) {\r\n    /** We need to fetch users first */\r\n    const newUsers = await getUsers(ids);\r\n    dispatch({\r\n      type: \"append users\",\r\n      payload: newUsers,\r\n    });\r\n  }\r\n\r\n};","const ChatIcon = () => (\n  <svg\n    width=\"32\"\n    height=\"32\"\n    viewBox=\"0 0 1651 1651\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <rect width=\"1651\" height=\"1651\" rx=\"14\" fill=\"white\" />\n    <path\n      d=\"M495.286 1098.96L497.967 1070.86L478.04 1050.88C408.572 981.233 368 891.771 368 795.344C368 585.371 565.306 402 826 402C1086.69 402 1284 585.371 1284 795.344C1284 1005.32 1086.69 1188.69 826 1188.69V1248.69L825.913 1188.69C779.837 1188.75 733.952 1182.77 689.432 1170.9L667.26 1164.98L646.8 1175.37C620.731 1188.61 562.74 1213.98 467.32 1235.35C480.554 1191.83 490.95 1144.39 495.286 1098.96Z\"\n      stroke=\"url(#paint0_linear)\"\n      strokeWidth=\"120\"\n    />\n    <defs>\n      <linearGradient\n        id=\"paint0_linear\"\n        x1=\"662.312\"\n        y1=\"397.956\"\n        x2=\"416.164\"\n        y2=\"1678.7\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        <stop stopColor=\"#7514FB\" />\n        <stop offset=\"0.624243\" stopColor=\"#F26D41\" />\n        <stop offset=\"1\" stopColor=\"#F43B4B\" />\n      </linearGradient>\n    </defs>\n  </svg>\n);\n\nexport default ChatIcon;\n","// @ts-check\nimport React, { useMemo } from \"react\";\nimport { getAvatarByUserAndRoomId } from \"../../../../../utils\";\nimport ChatIcon from \"./ChatIcon\";\n\nconst AvatarImage = ({ name, id }) => {\n  const url = useMemo(() => {\n    const av = getAvatarByUserAndRoomId(\"\" + id);\n    if (name === \"User1\") {\n      return `${process.env.PUBLIC_URL}/avatars/0.jpg`;\n    } else if (name === \"User2\") {\n      return `${process.env.PUBLIC_URL}/avatars/2.jpg`;\n    } else if (name === \"User3\") {\n      return `${process.env.PUBLIC_URL}/avatars/9.jpg`;\n    } else if (name === \"User4\") {\n      return `${process.env.PUBLIC_URL}/avatars/8.jpg`;\n    }\n    return av;\n  }, [id, name]);\n\n  return (\n    <>\n      {name !== \"General\" ? (\n        <img\n          src={url}\n          alt={name}\n          style={{ width: 32, height: 32, objectFit: \"cover\" }}\n          className=\"rounded-circle avatar-xs\"\n        />\n      ) : (\n        <div className=\"overflow-hidden rounded-circle\">\n          <ChatIcon />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default AvatarImage;\n","const OnlineIndicator = ({ online, hide = false, width = 8, height = 8 }) => {\n  return (\n    <div\n      className={\n        online ? \"rounded-circle bg-success\" : \"rounded-circle bg-gray\"\n      }\n      style={{ width, height, opacity: hide ? 0 : 1 }}\n    ></div>\n  );\n};\n\nexport default OnlineIndicator;\n","// @ts-check\nimport \"./style.css\";\nimport React, { useMemo } from \"react\";\nimport { useAppState } from \"../../../../../../state\";\nimport moment from \"moment\";\nimport { useEffect } from \"react\";\nimport { getMessages } from \"../../../../../../api\";\nimport AvatarImage from \"../AvatarImage\";\nimport OnlineIndicator from \"../../../OnlineIndicator\";\n\n/**\n * @param {{ active: boolean; room: import('../../../../../../state').Room; onClick: () => void; }} props\n */\nconst ChatListItem = ({ room, active = false, onClick }) => {\n  const { online, name, lastMessage, userId } = useChatListItemHandlers(room);\n  return (\n    <div\n      onClick={onClick}\n      className={`chat-list-item d-flex align-items-start rounded ${\n        active ? \"bg-white\" : \"\"\n      }`}\n    >\n      <div className=\"align-self-center mr-3\">\n        <OnlineIndicator online={online} hide={room.id === \"0\"} />\n      </div>\n      <div className=\"align-self-center mr-3\">\n        <AvatarImage name={name} id={userId} />\n      </div>\n      <div className=\"media-body overflow-hidden\">\n        <h5 className=\"text-truncate font-size-14 mb-1\">{name}</h5>\n        {lastMessage && (\n          <p className=\"text-truncate mb-0\"> {lastMessage.message} </p>\n        )}\n      </div>\n      {lastMessage && (\n        <div className=\"font-size-11\">\n          {moment.unix(lastMessage.date).format(\"LT\")}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst useChatListItemHandlers = (\n  /** @type {import(\"../../../../../../state\").Room} */ room\n) => {\n  const { id, name } = room;\n  const [state] = useAppState();\n\n  /** Here we want to associate the room with a user by its name (since it's unique). */\n  const [isUser, online, userId] = useMemo(() => {\n    try {\n      let pseudoUserId = Math.abs(parseInt(id.split(\":\").reverse().pop()));\n      const isUser = pseudoUserId > 0;\n      const usersFiltered = Object.entries(state.users)\n        .filter(([, user]) => user.username === name)\n        .map(([, user]) => user);\n      let online = false;\n      if (usersFiltered.length > 0) {\n        online = usersFiltered[0].online;\n        pseudoUserId = +usersFiltered[0].id;\n      }\n      return [isUser, online, pseudoUserId];\n    } catch (_) {\n      return [false, false, \"0\"];\n    }\n  }, [id, name, state.users]);\n\n  const lastMessage = useLastMessage(room);\n\n  return {\n    isUser,\n    online,\n    userId,\n    name: room.name,\n    lastMessage,\n  };\n};\n\nconst useLastMessage = (\n  /** @type {import(\"../../../../../../state\").Room} */ room\n) => {\n  const [, dispatch] = useAppState();\n  const { lastMessage } = room;\n  useEffect(() => {\n    if (lastMessage === undefined) {\n      /** need to fetch it */\n      if (room.messages === undefined) {\n        getMessages(room.id, 0, 1).then((messages) => {\n          let message = null;\n          if (messages.length !== 0) {\n            message = messages.pop();\n          }\n          dispatch({\n            type: \"set last message\",\n            payload: { id: room.id, lastMessage: message },\n          });\n        });\n      } else if (room.messages.length === 0) {\n        dispatch({\n          type: \"set last message\",\n          payload: { id: room.id, lastMessage: null },\n        });\n      } else {\n        dispatch({\n          type: \"set last message\",\n          payload: {\n            id: room.id,\n            lastMessage: room.messages[room.messages.length - 1],\n          },\n        });\n      }\n    }\n  }, [lastMessage, dispatch, room]);\n\n  return lastMessage;\n};\n\nexport default ChatListItem;\n","// @ts-check\n\nimport React from \"react\";\nimport { Plug } from \"react-bootstrap-icons\";\nimport OnlineIndicator from \"../../OnlineIndicator\";\nimport AvatarImage from \"./AvatarImage\";\n\nconst Footer = ({ user, onLogOut }) => (\n  <div\n    className=\"row no-gutters align-items-center pl-4 pr-2 pb-3\"\n    style={{ height: \"inherit\", flex: 0, minHeight: 50 }}\n  >\n    {true ? (\n      <>\n        <UserInfo user={user} col={8} />\n        <LogoutButton onLogOut={onLogOut} col={4} />\n      </>\n    ) : (\n      <>\n        <LogoutButton noinfo onLogOut={onLogOut} col={8} />\n        <UserInfo noinfo user={user} col={4} />\n      </>\n    )}\n  </div>\n);\n\nconst LogoutButton = ({ onLogOut, col = 5, noinfo = false }) => (\n  <div\n    onClick={onLogOut}\n    style={{ cursor: \"pointer\" }}\n    className={`col-${col} text-danger ${!noinfo ? \"text-right\" : \"\"}`}\n  >\n    <Plug/> Exit Chat\n  </div>\n);\n\nconst UserInfo = ({ user, col = 7, noinfo = false }) => (\n  <div\n    className={`col-${col} d-flex align-items-center ${\n      noinfo ? \"justify-content-end\" : \"\"\n    }`}\n  >\n    <div className={`align-self-center ${noinfo ? \"\" : \"mr-3\"}`}>\n      <AvatarImage name={user.username} id={user.id} />\n    </div>\n    {!noinfo && (\n      <div className=\"media-body\">\n        <h5 className=\"font-size-14 mt-0 mb-1\">{user.username}</h5>\n        <div className=\"d-flex align-items-center\">\n          <OnlineIndicator online={true} />\n          <p className=\"ml-2 text-muted mb-0\">Active</p>\n        </div>\n      </div>\n    )}\n  </div>\n);\n\nexport default Footer;\n","// @ts-check\nimport React, { useMemo } from \"react\";\nimport ChatListItem from \"./components/ChatListItem\";\nimport Footer from \"./components/Footer\";\n\nconst ChatList = ({ rooms, dispatch, user, currentRoom, onLogOut }) => {\n  const processedRooms = useMemo(() => {\n    const roomsList = Object.values(rooms);\n    const main = roomsList.filter((x) => x.id === \"0\");\n    let other = roomsList.filter((x) => x.id !== \"0\");\n    other = other.sort(\n      (a, b) => +a.id.split(\":\").pop() - +b.id.split(\":\").pop()\n    );\n    return [...(main ? main : []), ...other];\n  }, [rooms]);\n  return (\n    <>\n      <div className=\"chat-list-container flex-column d-flex pr-4\">\n        <div className=\"messages-box flex flex-1\">\n          <div className=\"list-group rounded-0\">\n            {processedRooms.map((room) => (\n              <ChatListItem\n                key={room.id}\n                onClick={() =>\n                  dispatch({ type: \"set current room\", payload: room.id })\n                }\n                active={currentRoom === room.id}\n                room={room}\n              />\n            ))}\n          </div>\n        </div>\n        <div className=\"py-2\">\n          <p className=\"h5 mb-0 py-1 chats-title\">Chats</p>\n        </div>\n        <Footer user={user} onLogOut={onLogOut} />\n      </div>\n    </>\n  );\n};\n\nexport default ChatList;\n","// @ts-check\nconst InfoMessage = ({ message }) => {\n  return (\n    <p\n      className=\"mb-2 fs-6 fw-light fst-italic text-black-50 text-center\"\n      style={{ opacity: 0.8, fontSize: 14 }}\n    >\n      {message}\n    </p>\n  );\n};\n\nexport default InfoMessage;\n","// @ts-check\nimport React from \"react\";\n\nconst MessagesLoading = () => {\n  return (\n    <div className=\"no-messages flex-column d-flex flex-row justify-content-center align-items-center text-muted text-center\">\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"visually-hidden\" />\n      </div>\n    </div>\n  );\n};\n\nexport default MessagesLoading;\n","// @ts-check\nimport React from \"react\";\nimport { CardText } from \"react-bootstrap-icons\";\n\nconst NoMessages = () => {\n  return (\n    <div className=\"no-messages flex-column d-flex flex-row justify-content-center align-items-center text-muted text-center\">\n      <CardText size={96} />\n      <p>No messages</p>\n    </div>\n  );\n};\n\nexport default NoMessages;\n","const ClockIcon = () => (\n  <svg\n    width={12}\n    height={12}\n    className=\"prefix__MuiSvgIcon-root prefix__jss80 prefix__MuiSvgIcon-fontSizeLarge\"\n    viewBox=\"0 0 24 24\"\n    aria-hidden=\"true\"\n  >\n    <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\" />\n    <path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\" />\n  </svg>\n);\n\nexport default ClockIcon;\n","// @ts-check\nimport moment from \"moment\";\nimport React from \"react\";\nimport ClockIcon from \"./ClockIcon\";\n\nconst ReceiverMessage = ({\n  username = \"user\",\n  message = \"Lorem ipsum dolor...\",\n  date,\n}) => (\n  <div className=\"d-flex\">\n    <div style={{ flex: 1 }} />\n    <div style={{ width: \"50%\" }} className=\"text-right mb-4\">\n      <div\n        className=\"conversation-list d-inline-block bg-light px-3 py-2\"\n        style={{ borderRadius: 12 }}\n      >\n        <div className=\"ctext-wrap\">\n          <div\n            className=\"conversation-name text-left text-primary mb-1\"\n            style={{\n              fontWeight: 600,\n            }}\n          >\n            {username}\n          </div>\n          <p className=\"text-left\">{message}</p>\n          <p className=\"chat-time mb-0\">\n            <ClockIcon /> {moment.unix(date).format(\"LT\")}{\" \"}\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\nexport default ReceiverMessage;\n","// @ts-check\nimport moment from \"moment\";\nimport React from \"react\";\nimport ClockIcon from \"./ClockIcon\";\nimport OnlineIndicator from \"../../OnlineIndicator\";\n\nconst SenderMessage = ({\n  user,\n  message = \"Lorem ipsum dolor...\",\n  date,\n  onUserClicked,\n}) => (\n  <div className=\"d-flex\">\n    <div style={{ width: \"50%\" }} className=\"text-left mb-4\">\n      <div\n        className=\"conversation-list d-inline-block px-3 py-2\"\n        style={{ borderRadius: 12, backgroundColor: \"rgba(85, 110, 230, 0.1)\" }}\n      >\n        <div className=\"ctext-wrap\">\n          {user && (\n            <div className=\"conversation-name d-flex align-items-center mb-1\">\n              <div\n                className=\"mr-2\"\n                style={{\n                  fontWeight: 600,\n                  cursor: \"pointer\",\n                  color: \"green\"\n                }}\n                onClick={onUserClicked}\n              >\n                {user.username}\n              </div>\n              <OnlineIndicator width={7} height={7} online={user.online} />\n            </div>\n          )}\n          <p className=\"text-left\">{message}</p>\n          <p className=\"chat-time mb-0\">\n            <ClockIcon /> {moment.unix(date).format(\"LT\")}{\" \"}\n          </p>\n        </div>\n      </div>\n    </div>\n    <div style={{ flex: 1 }} />\n  </div>\n);\n\nexport default SenderMessage;\n","// @ts-check\nimport React from \"react\";\nimport { MESSAGES_TO_LOAD } from \"../../../../api\";\nimport InfoMessage from \"./components/InfoMessage\";\nimport MessagesLoading from \"./components/MessagesLoading\";\nimport NoMessages from \"./components/NoMessages\";\nimport ReceiverMessage from \"./components/ReceiverMessage\";\nimport SenderMessage from \"./components/SenderMessage\";\n\nconst MessageList = ({\n  messageListElement,\n  messages,\n  room,\n  onLoadMoreMessages,\n  user,\n  onUserClicked,\n  users,\n}) => (\n  <div\n    ref={messageListElement}\n    className=\"chat-box-wrapper position-relative d-flex\"\n  >\n    {messages === undefined ? (\n      <MessagesLoading />\n    ) : messages.length === 0 ? (\n      <NoMessages />\n    ) : (\n      <></>\n    )}\n    <div className=\"px-4 pt-5 chat-box position-absolute\">\n      {messages && messages.length !== 0 && (\n        <>\n          {room.offset && room.offset >= MESSAGES_TO_LOAD ? (\n            <div className=\"d-flex flex-row align-items-center mb-4\">\n              <div\n                style={{ height: 1, backgroundColor: \"#eee\", flex: 1 }}\n              ></div>\n              <div className=\"mx-3\">\n                <button\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"true\"\n                  type=\"button\"\n                  onClick={onLoadMoreMessages}\n                  className=\"btn rounded-button btn-secondary nav-btn\"\n                  id=\"__BVID__168__BV_toggle_\"\n                >\n                  Load more\n                </button>\n              </div>\n              <div\n                style={{ height: 1, backgroundColor: \"#eee\", flex: 1 }}\n              ></div>\n            </div>\n          ) : (\n            <></>\n          )}\n          {messages.map((message, x) => {\n            const key = message.message + message.date + message.from + x;\n            if (message.from === \"info\") {\n              return <InfoMessage key={key} message={message.message} />;\n            }\n            if (+message.from !== +user.id) {\n              return (\n                <SenderMessage\n                  onUserClicked={() => onUserClicked(message.from)}\n                  key={key}\n                  message={message.message}\n                  date={message.date}\n                  user={users[message.from]}\n                />\n              );\n            }\n            return (\n              <ReceiverMessage\n                username={\n                  users[message.from] ? users[message.from].username : \"\"\n                }\n                key={key}\n                message={message.message}\n                date={message.date}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  </div>\n);\nexport default MessageList;\n","// @ts-check\nconst TypingArea = ({ message, setMessage, onSubmit }) => (\n  <div className=\"p-3 chat-input-section\">\n    <form className=\"row\" onSubmit={onSubmit}>\n      <div className=\"col\">\n        <div className=\"position-relative\">\n          <input\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            type=\"text\"\n            placeholder=\"Chat Here...\"\n            className=\"form-control chat-input\"\n          />\n          {/**/}\n        </div>\n      </div>\n      <div className=\"col-auto\">\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary btn-rounded chat-send w-md\"\n        >\n          <span className=\"d-none d-sm-inline-block mr-2\">Send</span>\n          <svg width={13} height={13} viewBox=\"0 0 24 24\" tabIndex={-1}>\n            <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" fill=\"white\" />\n          </svg>\n        </button>\n      </div>\n    </form>\n  </div>\n);\n\nexport default TypingArea;\n","// @ts-check\nimport { useCallback } from \"react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { addRoom, getMessages } from \"../../api\";\nimport { useAppState } from \"../../state\";\nimport { parseRoomName, populateUsersFromLoadedMessages } from \"../../utils\";\n\n/** Lifecycle hooks with callbacks for the Chat component */\nconst useChatHandlers = (/** @type {import(\"../../state\").UserEntry} */ user) => {\n  const [state, dispatch] = useAppState();\n  const messageListElement = useRef(null);\n\n  /** @type {import(\"../../state\").Room} */\n  const room = state.rooms[state.currentRoom];\n  const roomId = room?.id;\n  const messages = room?.messages;\n\n  const [message, setMessage] = useState(\"\");\n\n  const scrollToTop = useCallback(() => {\n    setTimeout(() => {\n      if (messageListElement.current) {\n        messageListElement.current.scrollTop = 0;\n      }\n    }, 0);\n  }, []);\n\n  const scrollToBottom = useCallback(() => {\n    if (messageListElement.current) {\n      messageListElement.current.scrollTo({\n        top: messageListElement.current.scrollHeight,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  const onFetchMessages = useCallback(\n    (offset = 0, prepend = false) => {\n      getMessages(roomId, offset).then(async (messages) => {\n        /** We've got messages but it's possible we might not have the cached user entires which correspond to those messages */\n        await populateUsersFromLoadedMessages(state.users, dispatch, messages);\n\n        dispatch({\n          type: prepend ? \"prepend messages\" : \"set messages\",\n          payload: { id: roomId, messages: messages },\n        });\n        if (prepend) {\n          setTimeout(() => {\n            scrollToTop();\n          }, 10);\n        } else {\n          scrollToBottom();\n        }\n      });\n    },\n    [dispatch, roomId, scrollToBottom, scrollToTop, state.users]\n  );\n\n  useEffect(() => {\n    if (roomId === undefined) {\n      return;\n    }\n    if (messages === undefined) {\n      /** Fetch logic goes here */\n      onFetchMessages();\n    }\n  }, [\n    messages,\n    dispatch,\n    roomId,\n    state.users,\n    state,\n    scrollToBottom,\n    onFetchMessages,\n  ]);\n\n  useEffect(() => {\n    if (messageListElement.current) {\n      scrollToBottom();\n    }\n  }, [scrollToBottom, roomId]);\n\n  const onUserClicked = async (userId) => {\n    /** Check if room exists. */\n    const targetUser = state.users[userId];\n    let roomId = targetUser.room;\n    if (roomId === undefined) {\n      // @ts-ignore\n      const room = await addRoom(userId, user.id);\n      roomId = room.id;\n      /** We need to set this room id to user. */\n      dispatch({ type: \"set user\", payload: { ...targetUser, room: roomId } });\n      /** Then a new room should be added to the store. */\n      dispatch({\n        type: \"add room\",\n        // @ts-ignore\n        payload: { id: roomId, name: parseRoomName(room.names, user.username) },\n      });\n    }\n    /** Then a room should be changed */\n    dispatch({ type: \"set current room\", payload: roomId });\n  };\n\n  const onLoadMoreMessages = useCallback(() => {\n    onFetchMessages(room.offset, true);\n  }, [onFetchMessages, room]);\n\n  return {\n    onLoadMoreMessages,\n    onUserClicked,\n    message,\n    setMessage,\n    dispatch,\n    room,\n    rooms: state.rooms,\n    currentRoom: state.currentRoom,\n    messageListElement,\n    roomId,\n    users: state.users,\n    messages,\n  };\n};\nexport default useChatHandlers;","// @ts-check\r\nimport React from \"react\";\r\nimport ChatList from \"./components/ChatList\";\r\nimport MessageList from \"./components/MessageList\";\r\nimport TypingArea from \"./components/TypingArea\";\r\nimport useChatHandlers from \"./use-chat-handlers\";\r\n\r\n/**\r\n * @param {{\r\n *  onLogOut: () => void,\r\n *  onMessageSend: (message: string, roomId: string) => void,\r\n *  user: import(\"../../state\").UserEntry\r\n * }} props\r\n */\r\nexport default function Chat({ onLogOut, user, onMessageSend }) {\r\n  const {\r\n    onLoadMoreMessages,\r\n    onUserClicked,\r\n    message,\r\n    setMessage,\r\n    rooms,\r\n    room,\r\n    currentRoom,\r\n    dispatch,\r\n    messageListElement,\r\n    roomId,\r\n    messages,\r\n    users,\r\n  } = useChatHandlers(user);\r\n\r\n  return (\r\n    <div className=\"container py-4 px-5\">\r\n      <div className=\"chat-body row overflow-hidden shadow bg-light rounded\">\r\n        <div className=\"col-8 px-0 flex-column bg-white rounded-lg\">\r\n          <div className=\"px-4 py-4\" style={{ borderBottom: \"1px solid green\" }}>\r\n            <h2 className=\"font-size-15 mb-0\">{room ? room.name : \"Chat Room\"}</h2>\r\n          </div>\r\n          <MessageList\r\n            messageListElement={messageListElement}\r\n            messages={messages}\r\n            room={room}\r\n            onLoadMoreMessages={onLoadMoreMessages}\r\n            user={user}\r\n            onUserClicked={onUserClicked}\r\n            users={users}\r\n          />\r\n\r\n          <TypingArea\r\n            message={message}\r\n            setMessage={setMessage}\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              onMessageSend(message.trim(), roomId);\r\n              setMessage(\"\");\r\n\r\n              messageListElement.current.scrollTop =\r\n                messageListElement.current.scrollHeight;\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"col-4 px-0\">\r\n          <ChatList\r\n            user={user}\r\n            onLogOut={onLogOut}\r\n            rooms={rooms}\r\n            currentRoom={currentRoom}\r\n            dispatch={dispatch}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// @ts-check\r\nimport React from \"react\";\r\n\r\nexport function LoadingScreen() {\r\n  return (\r\n    <div className=\"centered-box\">\r\n      <div className=\"spinner-border\" role=\"status\">\r\n        <span className=\"visually-hidden\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// @ts-check\nimport React, { useEffect, useState } from \"react\";\n\nconst Navbar = ({ showLogin }) => {\n  /**\n   * @type {[{\n   *  heroku?: string;\n   *  google_cloud?: string;\n   *  vercel?: string;\n   *  github?: string;\n   *  }, React.Dispatch<any>]}\n   */\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light d-flex justify-content-between\">\n      <span className=\"navbar-brand\">Chat Application</span>\n      {showLogin? <a href=\"https://https://github.com/trungIsOnGithhub\">Github</a> : <></>}\n    </nav>\n  );\n};\n\nexport default Navbar;\n","// @ts-check\nimport { useEffect, useState } from \"react\";\nimport { getMe, login, logOut } from \"./api\";\n\n\n/** User management hook. */\nconst useUser = (onUserLoaded = (user) => { }, dispatch) => {\n  const [loading, setLoading] = useState(true);\n  /** @type {[import('./state.js').UserEntry | null, React.Dispatch<import('./state.js').UserEntry>]} */\n  const [user, setUser] = useState(null);\n  /** Callback used in log in form. */\n  const onLogIn = (\n    username = \"\",\n    password = \"\",\n    onError = (val = null) => { },\n    onLoading = (loading = false) => { }\n  ) => {\n    onError(null);\n    onLoading(true);\n    login(username, password)\n      .then((x) => {\n        setUser(x);\n        onLoading(false);\n      })\n      .catch((e) => {\n        onError(e.message);\n        onLoading(false);\n      });\n  };\n\n  /** Log out form */\n  const onLogOut = async () => {\n    logOut().then(() => {\n      setUser(null);\n      /** This will clear the store, to completely re-initialize an app on the next login. */\n      dispatch({ type: \"clear\" });\n      setLoading(true);\n    });\n  };\n\n  /** Runs once when the component is mounted to check if there's user stored in cookies */\n  useEffect(() => {\n    if (!loading) {\n      return;\n    }\n    getMe().then((user) => {\n      setUser(user);\n      setLoading(false);\n      onUserLoaded(user);\n    });\n  }, [onUserLoaded, loading]);\n\n  return { user: typeof user === \"string\" ? null : user, onLogIn, onLogOut, loading };\n};\n\nexport {\n  useUser\n};","// @ts-check\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n// eslint-disable-next-line no-unused-vars\nimport io, { Socket } from \"socket.io-client\";\nimport { emitMessage, getEventSource } from \"./api\";\nimport { parseRoomName } from \"./utils\";\n/**\n * @param {import('./state').UserEntry} newUser\n */\nconst updateUser = (newUser, user, dispatch, infoMessage) => {\n  if (user.username === newUser.username) {\n    return;\n  }\n  dispatch({ type: \"set user\", payload: newUser });\n  if (infoMessage !== undefined) {\n    dispatch({\n      type: \"append message\",\n      payload: {\n        id: \"0\",\n        message: {\n          /** Date isn't shown in the info message, so we only need a unique value */\n          date: Math.random() * 10000,\n          from: \"info\",\n          message: infoMessage,\n        },\n      },\n    });\n  }\n};\n\n\nconst onShowRoom = (room, username, dispatch) => dispatch({\n  type: \"add room\",\n  payload: {\n    id: room.id,\n    name: parseRoomName(room.names, username),\n  },\n});\n\nconst onMessage = (message, dispatch) => {\n  /** Set user online */\n  dispatch({\n    type: \"make user online\",\n    payload: message.from,\n  });\n  dispatch({\n    type: \"append message\",\n    payload: { id: message.roomId === undefined ? \"0\" : message.roomId, message },\n  });\n};\n\n/** @returns {[Socket, boolean, () => void]} */\nconst useSocket = (user, dispatch, onLogOutBase) => {\n  const [connected, setConnected] = useState(false);\n  const eventSourceRef = useRef(null);\n\n  const emit = useCallback(async (type, message) => {\n    await emitMessage(type, user, message);\n    return {};\n  }, [user]);\n\n  const onLogOut = useCallback(async () => {\n    await emit(\"user.disconnected\", user);\n    onLogOutBase();\n  }, [onLogOutBase, emit, user]);\n\n  /** First of all it's necessary to handle the socket io connection */\n  useEffect(() => {\n    if (user === null) {\n      setConnected(false);\n      if (eventSourceRef.current !== null) {\n\n        window.onbeforeunload = undefined;\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n      }\n    } else {\n\n      if (eventSourceRef.current === null) {\n        eventSourceRef.current = getEventSource(user.id);\n        /** Handle non socket.io messages */\n        eventSourceRef.current.onmessage = function (e) {\n          const { type, data } = JSON.parse(e.data);\n          switch (type) {\n            case \"user.connected\": updateUser(data, user, dispatch, `${data.username} connected`);\n              break;\n            case \"user.disconnected\": updateUser(data, user, dispatch, `${data.username} left`);\n              break;\n            case \"show.room\": onShowRoom(data, user.username, dispatch);\n              break;\n            case 'message': onMessage(data, dispatch);\n              break;\n            default:\n              break;\n          }\n        };\n\n        window.onbeforeunload = () => {\n          if (eventSourceRef.current) {\n            eventSourceRef.current.close();\n          }\n          emit(\"user.disconnected\", user);\n          return undefined;\n        };\n\n        emit(\"user.connected\", user);\n      }\n      setConnected(true);\n    }\n  }, [user, dispatch, onLogOut, emit]);\n\n\n  return [\n    {\n      // @ts-ignore\n      emit\n    }\n    , connected, onLogOut];\n};\n\nexport { useSocket };\n","import React, { useEffect, useCallback } from \"react\";\r\nimport Login from \"./components/Login\";\r\nimport Chat from \"./components/Chat\";\r\nimport { getOnlineUsers, getRooms } from \"./api\";\r\nimport useAppStateContext, { AppContext } from \"./state\";\r\nimport moment from \"moment\";\r\nimport { parseRoomName } from \"./utils\";\r\nimport { LoadingScreen } from \"./components/LoadingScreen\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport { useUser } from \"./hooks\";\r\nimport { useSocket } from \"./use-socket\";\r\n\r\nconst App = () => {\r\n  const {\r\n    loading,\r\n    user,\r\n    state,\r\n    dispatch,\r\n    onLogIn,\r\n    onMessageSend,\r\n    onLogOut,\r\n  } = useAppHandlers();\r\n\r\n  if (loading) {\r\n    return <LoadingScreen />;\r\n  }\r\n\r\n  const showLogin = !user;\r\n\r\n  return (\r\n    <AppContext.Provider value={[state, dispatch]}>\r\n      <div\r\n        className={`full-height ${showLogin ? \"bg-light\" : \"\"}`}\r\n        style={{\r\n          backgroundColor: !showLogin ? \"#495057\" : undefined,\r\n        }}\r\n      >\r\n        <Navbar showLogin={showLogin}/>\r\n        {showLogin ? (\r\n          <Login onLogIn={onLogIn} />\r\n        ) : (\r\n          <Chat user={user} onMessageSend={onMessageSend} onLogOut={onLogOut} />\r\n        )}\r\n      </div>\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAppHandlers = () => {\r\n  const [state, dispatch] = useAppStateContext();\r\n  const onUserLoaded = useCallback(\r\n    (user) => {\r\n      if (user !== null) {\r\n        if (!state.users[user.id]) {\r\n          dispatch({ type: \"set user\", payload: { ...user, online: true } });\r\n        }\r\n      }\r\n    },\r\n    [dispatch, state.users]\r\n  );\r\n\r\n  const { user, onLogIn, onLogOut: onLogOutA, loading } = useUser(\r\n    onUserLoaded,\r\n    dispatch\r\n  );\r\n  const [socket, connected, onLogOut] = useSocket(user, dispatch, onLogOutA);\r\n\r\n  useEffect(() => {\r\n    if (user === null) {\r\n      return;\r\n    }\r\n    if (connected) {\r\n      const newRooms = [];\r\n      Object.keys(state.rooms).forEach((roomId) => {\r\n        const room = state.rooms[roomId];\r\n        if (room.connected) {\r\n          return;\r\n        }\r\n        newRooms.push({ ...room, connected: true });\r\n      });\r\n      if (newRooms.length !== 0) {\r\n        dispatch({ type: \"set rooms\", payload: newRooms });\r\n      }\r\n    } else {\r\n      /**\r\n       * It's necessary to set disconnected flags on rooms\r\n       * once the client is not connected\r\n       */\r\n      const newRooms = [];\r\n      Object.keys(state.rooms).forEach((roomId) => {\r\n        const room = state.rooms[roomId];\r\n        if (!room.connected) {\r\n          return;\r\n        }\r\n        newRooms.push({ ...room, connected: false });\r\n      });\r\n      /** Only update the state if it's only necessary */\r\n      if (newRooms.length !== 0) {\r\n        dispatch({ type: \"set rooms\", payload: newRooms });\r\n      }\r\n    }\r\n  }, [user, connected, dispatch, socket, state.rooms, state.users]);\r\n\r\n  /** Populate default rooms when user is not null */\r\n  useEffect(() => {\r\n    /** @ts-ignore */\r\n    if (Object.values(state.rooms).length === 0 && user !== null) {\r\n      /** First of all fetch online users. */\r\n      getOnlineUsers().then((users) => {\r\n        dispatch({\r\n          type: \"append users\",\r\n          payload: users,\r\n        });\r\n      });\r\n      /** Then get rooms. */\r\n      getRooms(user.id).then((rooms) => {\r\n        const payload = [];\r\n        rooms.forEach(({ id, names }) => {\r\n          payload.push({ id, name: parseRoomName(names, user.username) });\r\n        });\r\n        /** Here we also can populate the state with default chat rooms */\r\n        dispatch({\r\n          type: \"set rooms\",\r\n          payload,\r\n        });\r\n        dispatch({ type: \"set current room\", payload: \"0\" });\r\n      });\r\n    }\r\n  }, [dispatch, state.rooms, user]);\r\n\r\n  const onMessageSend = useCallback(\r\n    (message, roomId) => {\r\n      if (typeof message !== \"string\" || message.trim().length === 0) {\r\n        return;\r\n      }\r\n      if (!socket) {\r\n        /** Normally there shouldn't be such case. */\r\n        console.error(\"Couldn't send message\");\r\n      }\r\n      socket.emit(\"message\", {\r\n        roomId: roomId,\r\n        message,\r\n        from: user.id,\r\n        date: moment(new Date()).unix(),\r\n      });\r\n    },\r\n    [user, socket]\r\n  );\r\n\r\n  return {\r\n    loading,\r\n    user,\r\n    state,\r\n    dispatch,\r\n    onLogIn,\r\n    onMessageSend,\r\n    onLogOut,\r\n  };\r\n};\r\n\r\nexport default App;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import \"./styles/style-overrides.css\";\r\nimport \"./styles/style.css\";\r\nimport \"./styles/font-face.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}